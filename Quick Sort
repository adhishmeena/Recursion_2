Quick Sort - Problem Statement
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 


//Main Code


/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call.
    This can be done by calling a helper function from given function. 
    The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}
	
		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}
	
	}
	
*/


public class Solution {
    
    
    public static int partition(int[] input, int startIndex, int endIndex) {
          int pivot_element=input[startIndex];
        int No_of_Greater_element=0;
          for(int i=startIndex+1;i<=endIndex;i++){
              if(pivot_element>input[i]){
                  No_of_Greater_element=No_of_Greater_element+1;
              }
          }
        int temp=input[startIndex+No_of_Greater_element];
        input[startIndex+No_of_Greater_element]=pivot_element;
        input[startIndex]=temp;
        
        //we want to shift all the greater than pivot_element to it's right and smaller to it's left 
      int  i=startIndex;
      int  j=endIndex;
        while(i<j){
            if(pivot_element>input[i]){
                i=i+1;
            }
            else if (pivot_element<=input[j]){
                j=j-1;
                
            }
            else
            {temp=input[i];
                 input[i]=input[j];
                 input[j]=temp;
                i=i+1;
                j=j-1;
            }
            
            
            
        }
        
        return startIndex+No_of_Greater_element;
    }
         
        
        
    
    
    
    
    
    public static void quickSor(int[] input, int startIndex, int endIndex) {
        if (startIndex>=endIndex){
            
            return;
        }
        
       int  pivot_index=partition(input,startIndex,endIndex);
        quickSor(input,startIndex,pivot_index-1);
        quickSor(input,pivot_index+1,endIndex);
        
        
			// your code goes here
		}
	
	
	public static void quickSort(int[] input) {
        quickSor(input,0,input.length-1);
        
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
		
	}
	
}
